// @flow
type HookCallback<T> = (payload: T) => T

type Hook<T> = ({
  payload: T,
  next: HookCallback<T>,
  resolve: HookCallback<T>,
  reject: HookCallback<T>
}) => T

type HooksObject<T> = {
  [type: string]: Hook<T>[]
}

type apicase = <T>(
  adapter: {
    callback: ({ payload: T, resolve: Function, reject: Function }) => any,
    convert?: (from: T) => T,
    merge?: (from: T, to: T) => T
  },
  req: {
    ...$Exact<T>,
    meta: { [key: string]: any },
    hooks?: { [type: string]: Hook<T>[] }
  }
) => T

declare module.exports: apicase
